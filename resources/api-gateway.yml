# API Gateway Infrastructure as Code
Resources:
  # Gateway Responses for better error handling
  GatewayResponse400:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      ResponseType: BAD_REQUEST_BODY
      StatusCode: "400"
      ResponseTemplates:
        application/json: |
          {
            "error": {
              "code": "VALIDATION_ERROR",
              "message": "Invalid request body",
              "details": ["$context.error.validationErrorString"],
              "timestamp": "$context.requestTime"
            }
          }
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'${file(config/${self:provider.stage}.yml):security.cors.allowOrigin}'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'${file(config/${self:provider.stage}.yml):security.cors.allowHeaders}'"

  GatewayResponse404:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      ResponseType: RESOURCE_NOT_FOUND
      StatusCode: "404"
      ResponseTemplates:
        application/json: |
          {
            "error": {
              "code": "RESOURCE_NOT_FOUND",
              "message": "The requested resource was not found",
              "timestamp": "$context.requestTime"
            }
          }
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'${file(config/${self:provider.stage}.yml):security.cors.allowOrigin}'"

  GatewayResponse429:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      ResponseType: THROTTLED
      StatusCode: "429"
      ResponseTemplates:
        application/json: |
          {
            "error": {
              "code": "RATE_LIMIT_EXCEEDED",
              "message": "Request rate limit exceeded",
              "timestamp": "$context.requestTime"
            }
          }
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'${file(config/${self:provider.stage}.yml):security.cors.allowOrigin}'"

  GatewayResponse500:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      ResponseType: DEFAULT_5XX
      StatusCode: "500"
      ResponseTemplates:
        application/json: |
          {
            "error": {
              "code": "INTERNAL_SERVER_ERROR",
              "message": "An internal server error occurred",
              "timestamp": "$context.requestTime"
            }
          }
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'${file(config/${self:provider.stage}.yml):security.cors.allowOrigin}'"

  # CloudWatch Log Group for API Gateway
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigateway/medical-appointment-scheduling-${self:provider.stage}
      RetentionInDays: ${file(config/${self:provider.stage}.yml):logging.retentionDays}

Outputs:
  ApiGatewayRestApiId:
    Description: "ID of the API Gateway REST API"
    Value:
      Ref: ApiGatewayRestApi
    Export:
      Name: ${self:service}-${self:provider.stage}-api-gateway-rest-api-id
